variables:
  NAMESPACE: edp-delivery-edp-delivery-qa
  PROJECT_NAME: go-go-beego
  VERSIONING_TYPE: default
  CLUSTER_URL: https://5B1468C7DC248E401E445D5B8E98ED58.sk1.eu-central-1.eks.amazonaws.com

default:
  image: epamedp/jenkins-agent-go:go1.14.3

stages:
  - init
  - set-version
  - unit-tests
  - build
  - create-docker-image
  - create-image-stream-tag
  - create-git-tag

.before_script_login_to_cluster:
  before_script:
    - kubectl config set-cluster default --insecure-skip-tls-verify=true --server=$CLUSTER_URL
    - kubectl config set-credentials default --token=$K8S_SA_TOKEN
    - kubectl config set-context default --user=default --cluster=default
    - kubectl config use-context default

init:
  extends: .before_script_login_to_cluster
  stage: init
  script:
    - >
      buildNumber=$(kubectl -n $NAMESPACE get codebasebranches.v2 $PROJECT_NAME-$(echo $CI_COMMIT_BRANCH | sed 's/\//-/g') -o jsonpath="{.status.build}");
      buildNumber=$((buildNumber+1));
      projectVersion=$(cat VERSION);
      if [ "$VERSIONING_TYPE" == "edp" ]; then
          version=$(kubectl -n $NAMESPACE get codebasebranches.v2 $PROJECT_NAME-$(echo $CI_COMMIT_BRANCH | sed 's/\//-/g') -o jsonpath="{.spec.version}");
          codebaseImageStreamName=$PROJECT_NAME-edp-$(echo $CI_COMMIT_BRANCH | sed 's/\//-/g;s/\./-/g');
          isTag=$version.$buildNumber;
          crName=$codebaseImageStreamName-$(echo $isTag | sed 's/\//-/g;s/\./-/g' | awk '{print tolower($0)}');
          echo "version=$version" >> build.properties;
      else
          codebaseImageStreamName=$PROJECT_NAME-$(echo $CI_COMMIT_BRANCH | sed 's/\//-/g;s/\./-/g');
          isTag="$CI_COMMIT_BRANCH-$projectVersion-$buildNumber";
          crName=$codebaseImageStreamName-$(echo $isTag | sed 's/\//-/g;s/\./-/g' | awk '{print tolower($0)}');
      fi
    - echo "crName=$crName" >> build.properties;
    - echo "codebaseImageStreamName=$codebaseImageStreamName" >> build.properties;
    - echo "isTag=$isTag" >> build.properties;
    - echo "buildNumber=$buildNumber" >> build.properties;
  artifacts:
    paths:
      - build.properties
  rules:
    - if: $CI_COMMIT_BRANCH && '$CI_PIPELINE_SOURCE != "merge_request_event"'

set-version:
    extends: .before_script_login_to_cluster
    stage: set-version
    dependencies:
      - init
    script:
      - >
        buildNumber=$(grep buildNumber "build.properties" | awk -F= '{print $2}');
        kubectl -n $NAMESPACE patch codebasebranches.v2 $PROJECT_NAME-$(echo $CI_COMMIT_BRANCH | sed 's/\//-/g') --type=merge -p "{\"status\": {\"build\": "\"$buildNumber\""}}";
        if [ "$VERSIONING_TYPE" == "edp" ]; then
            version=$(grep version $"build.properties" | awk -F= '{print $2}')
            isRelease=$(kubectl -n $NAMESPACE get codebasebranches.v2 $PROJECT_NAME-$(echo $CI_COMMIT_BRANCH | sed 's/\//-/g') -o jsonpath="{.spec.release}");
            set -eo pipefail;
        	if $isRelease; then
        		newProjectVersion=$version-$buildNumber;
        	else
            	newProjectVersion=$version;
        	fi
            sed -i "s/<version>$projectVersion<\/version>/<version>$newProjectVersion<\/version>/" VERSION
         fi
    rules:
      - if: $CI_COMMIT_BRANCH && '$CI_PIPELINE_SOURCE != "merge_request_event"'

unit-tests:
  stage: unit-tests
  script:
    - export GOPATH=$HOME/go;
    - export PATH=$PATH:$GOROOT/bin:$GOPATH/bin;
    - export CGO_ENABLED=0;
    - go test -v ./... -coverprofile=coverage.out main.go
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

build:
  stage: build
  script:
    - export GOPATH=$HOME/go;
    - export PATH=$PATH:$GOROOT/bin:$GOPATH/bin;
    - go build -o entrypoint main.go
  artifacts:
    paths:
    - entrypoint
    expire_in: 2 mins
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

create-docker-image:
  image: epamedp/dind-aws-cli:latest
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DAEMON_OPTIONS: "--insecure-registry=$DOCKER_REGISTRY_URL"
    AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
  services:
    - name: docker:19.03.12-dind
      entrypoint: [ "sh", "-c", "dockerd-entrypoint.sh $DOCKER_DAEMON_OPTIONS" ]
  stage: create-docker-image
  dependencies:
    - init
    - build
  script:
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set default.region eu-central-1
    - aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin $DOCKER_REGISTRY_URL
    - aws ecr describe-repositories --repository-names $NAMESPACE/$PROJECT_NAME-$(echo $CI_COMMIT_BRANCH | sed 's/\//-/g;s/\./-/g') || aws ecr create-repository --repository-name $NAMESPACE/$PROJECT_NAME-$(echo $CI_COMMIT_BRANCH | sed 's/\//-/g;s/\./-/g')
    - isTag=$(grep isTag "build.properties" | awk -F= '{print $2}');
    - docker build -t $PROJECT_NAME .
    - docker tag $PROJECT_NAME "$DOCKER_REGISTRY_URL/$NAMESPACE/$PROJECT_NAME-$(echo $CI_COMMIT_BRANCH | sed 's/\//-/g;s/\./-/g'):$isTag"
    - docker push "$DOCKER_REGISTRY_URL/$NAMESPACE/$PROJECT_NAME-$(echo $CI_COMMIT_BRANCH | sed 's/\//-/g;s/\./-/g'):$isTag"
  rules:
    - if: $CI_COMMIT_BRANCH && '$CI_PIPELINE_SOURCE != "merge_request_event"'

create-image-stream-tag:
    extends: .before_script_login_to_cluster
    stage: create-image-stream-tag
    dependencies:
      - init
    script:
      - >
        crName=$(grep crName "build.properties" | awk -F= '{print $2}');
        codebaseImageStreamName=$(grep codebaseImageStreamName "build.properties" | awk -F= '{print $2}');
        isTag=$(grep isTag "build.properties" | awk -F= '{print $2}');
        kubectl -n $NAMESPACE get cm ist-template -o jsonpath="{.data.ist\\.json}"
        | sed '/\"name\": \"replace\"/c\ \"name\": \"'"$crName"'\"'
        | sed '/\"codebaseImageStreamName\": \"replace\"/c\ \"codebaseImageStreamName\": \"'"$codebaseImageStreamName"'\",'
        | sed '/\"tag\": \"replace\"/c\ \"tag\": \"'"$isTag"'\"'
        | kubectl -n $NAMESPACE apply -f -
    rules:
      - if: $CI_COMMIT_BRANCH && '$CI_PIPELINE_SOURCE != "merge_request_event"'

create-git-tag:
    extends: .before_script_login_to_cluster
    stage: create-git-tag
    dependencies:
      - init
    script:
      - >
        isTag=$(grep isTag "build.properties" | awk -F= '{print $2}');
        if [ "$VERSIONING_TYPE" == "edp" ]; then
          isTag=build/$isTag;
        fi
      - >
        codebaseImageStreamName=$(grep codebaseImageStreamName "build.properties" | awk -F= '{print $2}');
        gtName=$codebaseImageStreamName-$(echo $isTag | sed 's/\//-/g;s/\./-/g' | awk '{print tolower($0)}');
        kubectl -n $NAMESPACE get cm gt-template -o jsonpath="{.data.gt\\.json}"
        | sed '/\"name\": \"replace\"/c\ \"name\": \"'"$gtName"'\"'
        | sed '/\"codebase\": \"replace\"/c\ \"codebase\": \"'"$PROJECT_NAME"'\",'
        | sed '/\"branch\": \"replace\"/c\ \"branch\": \"'"$CI_COMMIT_BRANCH"'\",'
        | sed '/\"tag\": \"replace\"/c\ \"tag\": \"'"$isTag"'\"'
        | kubectl -n $NAMESPACE apply -f -
    rules:
      - if: $CI_COMMIT_BRANCH && '$CI_PIPELINE_SOURCE != "merge_request_event"'
